package com.ryanwemmer.fileutility;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;


@SuppressWarnings("serial")
public class SetupGui extends JFrame {

    /**
     * Creates new form SetupGui
     */
	
	String[] operations = new String[]{	"",
			"Find Missing Images or Files",
			"Identify Existing Images or files",			
			"Download Files",
			"Rename Images or Files"
		};
	
    public SetupGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new JLabel();
        jComboBoxOperation = new JComboBox();
        jTextFieldLeft = new JTextField();
        jLabelLeft = new JLabel();
        jLabelRight = new JLabel();
        jTextFieldRight = new JTextField();
        jScrollPane1 = new JScrollPane();
        jTextAreaLeft = new JTextArea();
        jScrollPane2 = new JScrollPane();
        jTextAreaRight = new JTextArea();
        jCheckBox1 = new JCheckBox();
        jButtonRun = new JButton();
        jLabelOutput = new JLabel();
        jScrollPane3 = new JScrollPane();
        jTextAreaOutput = new JTextArea();
        jButtonClear = new JButton();
        jLabelLeftLower = new JLabel();
        jLabelRightLower = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("File and Image Utility");
        setResizable(true);

        jLabel1.setText("Select Operation");

        jComboBoxOperation.setModel(new DefaultComboBoxModel(operations));
        jComboBoxOperation.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jComboBoxOperationActionPerformed(evt);
            }
        });

        jTextFieldLeft.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jTextFieldLeftActionPerformed(evt);
            }
        });

        jLabelLeft.setText("Source (must end with a slash \\  )");
        jLabelLeft.setToolTipText("");

        jLabelRight.setText("Destination");

        jTextAreaLeft.setColumns(20);
        jTextAreaLeft.setRows(5);
        jScrollPane1.setViewportView(jTextAreaLeft);

        jTextAreaRight.setColumns(20);
        jTextAreaRight.setRows(5);
        jScrollPane2.setViewportView(jTextAreaRight);

        jCheckBox1.setText("Append URL (Download only)");

        jButtonRun.setText("Run");
        jButtonRun.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonRunActionPerformed(evt);
            }
        });

        jLabelOutput.setText("Output Log");

        jTextAreaOutput.setEditable(false);
        jTextAreaOutput.setColumns(20);
        jTextAreaOutput.setRows(5);
        jTextAreaOutput.setToolTipText("Output Results");
        jScrollPane3.setViewportView(jTextAreaOutput);

        jButtonClear.setText("Clear");
        jButtonClear.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jLabelLeftLower.setText("List of File or Locations");

        jLabelRightLower.setText("List #2");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabelLeft, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                    .addComponent(jTextFieldLeft)
                    .addComponent(jLabelLeftLower, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jCheckBox1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 144, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jComboBoxOperation, 0, 212, Short.MAX_VALUE)
                            .addComponent(jTextFieldRight, GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addComponent(jLabelRightLower, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelOutput, GroupLayout.PREFERRED_SIZE, 128, GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonClear, GroupLayout.PREFERRED_SIZE, 104, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonRun, GroupLayout.PREFERRED_SIZE, 98, GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3)))
                    .addComponent(jLabelRight))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxOperation, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelLeft, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRight))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldLeft, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldRight, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelRightLower)
                        .addComponent(jLabelOutput))
                    .addComponent(jLabelLeftLower))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jButtonClear)
                    .addComponent(jButtonRun))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }                  
    private void jComboBoxOperationActionPerformed(ActionEvent evt) {                                                   
    	int index = jComboBoxOperation.getSelectedIndex();
    	switch (index) {
		case 1:
			jLabelLeft.setText("Enter Source Directory, must end with \\");
			jLabelLeftLower.setText("Enter list of Files to Check");			
			jLabelRight.setText("");
			jLabelRightLower.setText("");			
			jTextAreaLeft.setEditable(true);
			jTextAreaRight.setEditable(false);
			jTextFieldLeft.setEditable(true); 
			jTextFieldRight.setEditable(false);			
			break;
		case 2:
			jLabelLeft.setText("Enter Source Directory, must end with \\");
			jLabelLeftLower.setText("Enter list of Files to Check");
			jLabelRight.setText("");
			jLabelRightLower.setText("");			
			jTextAreaLeft.setEditable(true); 
			jTextAreaRight.setEditable(false);
			jTextFieldLeft.setEditable(true); 
			jTextFieldRight.setEditable(false);
			break;
		case 3:
			jLabelLeft.setText("Enter Save Directory. Must end with a \\");
			jLabelLeftLower.setText("List of URLs (Include http)");
			jLabelRightLower.setText("Filenames (will save with name)");			
			jTextAreaLeft.setEditable(true);
			jTextAreaRight.setEditable(true);
			jTextFieldLeft.setEditable(true); 
			jTextFieldRight.setEditable(false);			
			break;
		case 4:
			jLabelLeft.setText("Enter Source Directory. Must end with a \\");
			jLabelRight.setText("Enter Destination Directory. Must end with a \\");			
			jLabelLeftLower.setText("Source filenames");			
			jLabelRightLower.setText("Destination filenames");			
			jTextAreaLeft.setEditable(true);
			jTextAreaRight.setEditable(true);
			jTextFieldLeft.setEditable(true); 
			jTextFieldRight.setEditable(true);			
			break;
		default:
			break;
		}	
    }                                                  

    private void jTextFieldLeftActionPerformed(ActionEvent evt) {                                                       
    }                                              
    private void jButtonRunActionPerformed(ActionEvent evt) {                                           
    	/* 
    	 * A switch method is used to determine which operation is performed when the "Run" 
    	 * button is pressed by reading the selected index in jComboBoxOperation.
    	 * 
    	 * jTextFieldLeft and jTextFieldRight are for directory paths. Each directory path
    	 * needs the trailing slash ("\" or "/"). 
    	 * 
    	 * jTextAreaLeft and jTextAreaRight are for lists of information. Each item in the 
    	 * list should be separated by a newline (\n). This lists are parsed into arrays,  
    	 * which are split at each new line ("\n")
    	 */    	
    	int index = jComboBoxOperation.getSelectedIndex(); //Determine selected index.    	   	
    	switch (index) {
	    	/////// INDEX 1: FIND MISSING IMAGES OR FILES////////
			case 1:
				FindMissing fm = new FindMissing();
				String filePath = jTextFieldLeft.getText();
				//Parse text area values into an array.
				String[] images = jTextAreaLeft.getText().split("\n");
				String missing;
				String stringOutput = "";			
				for(int i = 0; i < images.length; i++){
						missing = fm.findIfMissing(filePath, images[i]);
						if(missing != null){
							stringOutput += missing +"\n";
						}				
				}			
				jLabelOutput.setText("Missing Images:");
				jTextAreaOutput.setText(stringOutput);			
				break;
				
	    	/////// INDEX 2: FIND EXISTING IMAGES OR FILES ////////		
			case 2:
				FindExisting fe = new FindExisting();
				String filePathExisting = jTextFieldLeft.getText();
				//Parse text area values into an array.
				String[] imagesExisting = jTextAreaLeft.getText().split("\n");			
				String existing;
				String stringOutputExisting = "";			
				for(int i = 0; i < imagesExisting.length; i++){
						existing = fe.findIfExisting(filePathExisting, imagesExisting[i]);
						if(existing != null){
							stringOutputExisting += existing +"\n";
						}
				}
				
				jLabelOutput.setText("Existing Images:");
				jTextAreaOutput.setText(stringOutputExisting);
				break;

			/////// INDEX 3: DOWNLOAD FILE(S) FROM URL ////////		
			case 3:
				DownloadFile df = new DownloadFile(); 									
				String[] fileLinks = jTextAreaLeft.getText().split("\n"); 	//Full URL to be downloaded
																			//User needs to include "http"
				String[] filesFiles = jTextAreaRight.getText().split("\n");				
				String directory = jTextFieldLeft.getText();		
				Boolean cbAppendUrl = false;				//Disabled 
															//TODO Allow users to Append Base URL with the current file names
				if(fileLinks.length == filesFiles.length){	//Verify URL count matches filename count
					try {
						df.downloadFile(directory, fileLinks, filesFiles, cbAppendUrl);
					} catch (Exception e) {
						e.printStackTrace();
						System.out.println(e.toString());
					}
				}else{
					jTextAreaOutput.setText("Error: Lists are different lengths!"); //Show error if lists are
																					//different lengths
				}
				break;
				
			/////// INDEX 4: RENAME IMAGES AND COPY TO NEW DIRECTORY ////////	
			case 4:				
				
				//ChangeName contains the method
				ChangeName cn = new ChangeName(); 
				
				//Handle user inputs 
				String[] inputFiles = jTextAreaLeft.getText().split("\n");
				String[] outputFiles = jTextAreaRight.getText().split("\n");
				String sourceDirectory = jTextFieldLeft.getText(); 
				String destinationDirectory = jTextFieldRight.getText(); 
				
				//If the arrays are the same length, run the method that creates copies. 
				if(inputFiles.length == outputFiles.length){ 
					cn.makeAllFiles(sourceDirectory, destinationDirectory, inputFiles, outputFiles);
				}else{
				//If lists are different lengths, alert the user
					jTextAreaOutput.setText("Error: Lists are different lengths!");
				}
				break;
			default: 
				break; 
		}    	
    }                                          
    //Clear button, resets all input fields. 
    private void jButtonClearActionPerformed(ActionEvent evt) {                                             		
		jTextAreaLeft.setText("");
		jTextAreaOutput.setText("");
		jTextAreaRight.setText("");
		jTextFieldLeft.setText("");
		jTextFieldRight.setText("");
    }
    ////////////////////////////////////////////////////////////////
    //////// Below code generated using netbeans GUI editor ////////
    ////////////////////////////////////////////////////////////////
    public static void main(String args[]) {
    	//Use default windows look and feel.
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SetupGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SetupGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SetupGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SetupGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SetupGui().setVisible(true);
            }
        });
    }
    // Variables declaration
    public JButton jButtonClear;
    public JButton jButtonRun;
    public JCheckBox jCheckBox1;
    @SuppressWarnings("rawtypes")
	public JComboBox jComboBoxOperation;
    private JLabel jLabel1;
    public JLabel jLabelLeft;
    public JLabel jLabelLeftLower;
    public JLabel jLabelOutput;
    public JLabel jLabelRight;
    public JLabel jLabelRightLower;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    public JTextArea jTextAreaLeft;
    public JTextArea jTextAreaOutput;
    public JTextArea jTextAreaRight;
    public JTextField jTextFieldLeft;
    public JTextField jTextFieldRight;
    // End of variables declaration                   
}

